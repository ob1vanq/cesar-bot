from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State

from loader import dp, bot
from database import db
from data.config import ADMINS


class poster(StatesGroup):
    create = State()
    post = State()


def get_mention(id):
    return f"<a href='tg://user?id={id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>"

def keyboard(data: list):
    return InlineKeyboardMarkup(
        row_width=2,
        inline_keyboard=[
            [
                InlineKeyboardButton(text=data[0], callback_data=data[-1]),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="stop"),
            ]
        ]
    )


keyboard2 = InlineKeyboardMarkup(
    row_width=2,
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="share"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="stop")
        ]
    ]
)


@dp.callback_query_handler(state=(None, poster.post), text="stop")
async def stop_post(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–ü–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    await state.finish()


class AdminFilter(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        member = message.from_user.id
        return str(member) in ADMINS


@dp.message_handler(Command("admin"), AdminFilter())
async def statistic(message: types.Message):
    import datetime
    data = datetime.datetime.now().strftime("%H:%M:%S| %d/%m/%y, %A")
    await message.answer(f"<b>{data}</b>\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db.count()}",
                         reply_markup=keyboard(["–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", "post"]))


@dp.callback_query_handler(text="post")
async def create_post_message(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–ñ–¥—É —Ç–µ–∫—Å—Ç üëá")
    await poster.create.set()


@dp.message_handler(state=poster.create)
async def create_post(message: types.Message, state: FSMContext):
    text = message.html_text
    await message.answer(text, reply_markup=keyboard2, parse_mode="HTML")
    await poster.post.set()
    await state.set_data(dict(text=text))


@dp.callback_query_handler(state=poster.post, text="share")
async def share(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data["text"]
    await call.message.answer("–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É...")
    for user_id in db.get_users():
        try:
            await bot.send_message(chat_id=user_id, text=text, parse_mode="HTML")
        except Exception as err:
            await call.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏—à–ª–æ {get_mention(user_id)} –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n{err}"
                                      f"\n–û–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
            db.delete_user(user_id=user_id)
    await call.message.answer("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await state.finish()

